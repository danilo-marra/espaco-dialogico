#!/usr/bin/env node

/**
 * Script para iniciar o ambiente de desenvolvimento de forma isolada
 * Evita conflitos com testes e garante um ambiente limpo
 */

const { spawn } = require("child_process");
const chalk = require("chalk");
const fs = require("fs");
const path = require("path");
const { fixNextPermissions } = require("../infra/scripts/fix-next-permissions");

async function runCommand(command, args, options = {}) {
  return new Promise((resolve, reject) => {
    console.log(chalk.yellow(`Executando: ${command} ${args.join(" ")}`));

    const childProcess = spawn(command, args, {
      stdio: "inherit",
      shell: true,
      env: { ...process.env, ...options.env },
      ...options,
    });

    childProcess.on("close", (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Comando falhou com c√≥digo ${code}`));
      }
    });
  });
}

async function cleanNextCache() {
  const nextDir = path.join(process.cwd(), ".next");

  console.log(chalk.blue("üßπ Limpando cache do Next.js..."));

  try {
    if (fs.existsSync(nextDir)) {
      // Primeiro, tentar corrigir permiss√µes no Windows
      if (process.platform === "win32") {
        console.log(chalk.yellow("üîß Corrigindo permiss√µes no Windows..."));
        fixNextPermissions();
      } else {
        // Linux/Mac - remover diretamente
        fs.rmSync(nextDir, { recursive: true, force: true });
        console.log(chalk.green("‚úÖ Cache do Next.js limpo com sucesso!"));
      }
    }
  } catch (error) {
    console.log(
      chalk.yellow(
        `‚ö†Ô∏è Aviso: N√£o foi poss√≠vel limpar completamente o cache: ${error.message}`,
      ),
    );

    // Tentar limpar arquivos espec√≠ficos que causam problemas
    try {
      const traceFile = path.join(nextDir, "trace");
      if (fs.existsSync(traceFile)) {
        fs.unlinkSync(traceFile);
        console.log(chalk.green("‚úÖ Arquivo trace removido!"));
      }
    } catch (traceError) {
      console.log(
        chalk.yellow(
          `‚ö†Ô∏è N√£o foi poss√≠vel remover o arquivo trace: ${traceError.message}`,
        ),
      );
    }
  }
}

async function main() {
  // Definir vari√°veis de ambiente para desenvolvimento
  process.env.NODE_ENV = "development";
  process.env.JEST_DISABLE_WATCH = "true";
  process.env.CI = "false";

  console.log(
    chalk.blue("üöÄ Iniciando ambiente de desenvolvimento isolado..."),
  );

  try {
    // 0. Limpar cache do Next.js para evitar problemas de permiss√£o
    await cleanNextCache();

    // 1. Parar qualquer servi√ßo anterior
    console.log(chalk.yellow("üõë Parando servi√ßos anteriores..."));
    try {
      await runCommand("npm", ["run", "services:down"]);
    } catch (error) {
      console.log(chalk.gray("Nenhum servi√ßo anterior encontrado."));
    }

    // 2. Iniciar servi√ßos do Docker
    console.log(chalk.blue("üê≥ Iniciando servi√ßos Docker..."));
    await runCommand("npm", ["run", "services:up"]);

    // 3. Aguardar banco de dados
    console.log(chalk.blue("‚è≥ Aguardando banco de dados..."));
    await runCommand("npm", ["run", "services:wait:database"]);

    // 4. Executar migra√ß√µes
    console.log(chalk.blue("üìä Executando migra√ß√µes..."));
    await runCommand("npm", ["run", "migrations:up"]);

    // 5. Iniciar Next.js em modo desenvolvimento
    console.log(chalk.green("üéØ Iniciando servidor de desenvolvimento..."));
    console.log(
      chalk.green("O servidor estar√° dispon√≠vel em: http://localhost:3000"),
    );
    console.log(chalk.yellow("Para parar, pressione Ctrl+C"));

    const nextProcess = spawn("npx", ["next", "dev"], {
      stdio: "inherit",
      shell: true,
      env: {
        ...process.env,
        NODE_ENV: "development",
        JEST_DISABLE_WATCH: "true",
        FORCE_COLOR: "1",
      },
    });

    // Timeout para detectar se o Next.js n√£o est√° iniciando
    const startupTimeout = setTimeout(() => {
      console.log(
        chalk.yellow("‚ö†Ô∏è Next.js parece estar demorando para iniciar..."),
      );
      console.log(
        chalk.yellow(
          "Isso pode indicar um problema com o cache ou permiss√µes.",
        ),
      );
      console.log(chalk.yellow("Tentando reiniciar..."));

      nextProcess.kill("SIGTERM");

      setTimeout(() => {
        console.log(chalk.blue("üîÑ Tentando iniciar novamente..."));
        const retryProcess = spawn("npx", ["next", "dev"], {
          stdio: "inherit",
          shell: true,
          env: {
            ...process.env,
            NODE_ENV: "development",
            JEST_DISABLE_WATCH: "true",
            FORCE_COLOR: "1",
          },
        });

        retryProcess.on("close", cleanup);
      }, 2000);
    }, 30000); // 30 segundos timeout

    // Limpar timeout se o processo iniciar corretamente
    nextProcess.on("spawn", () => {
      clearTimeout(startupTimeout);
    });

    // Fun√ß√£o para limpeza
    const cleanup = async () => {
      clearTimeout(startupTimeout);
      console.log(chalk.yellow("\nüßπ Limpando ambiente..."));
      nextProcess.kill();

      try {
        await runCommand("npm", ["run", "services:stop"]);
        console.log(chalk.green("‚úÖ Ambiente limpo com sucesso!"));
      } catch (error) {
        console.error(chalk.red("Erro na limpeza:", error.message));
      }

      process.exit(0);
    };

    // Interceptar sinais de interrup√ß√£o
    process.on("SIGINT", cleanup);
    process.on("SIGTERM", cleanup);

    // Aguardar o processo do Next.js
    nextProcess.on("close", cleanup);
  } catch (error) {
    console.error(chalk.red("‚ùå Erro:", error.message));
    process.exit(1);
  }
}

main();
