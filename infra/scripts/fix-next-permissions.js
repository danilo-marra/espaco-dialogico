#!/usr/bin/env node

/**
 * Script para corrigir problemas de permiss√£o no diret√≥rio .next
 * Espec√≠fico para Windows
 */

const { execSync } = require("child_process");
const chalk = require("chalk");
const fs = require("fs");
const path = require("path");

function fixNextPermissions() {
  const nextDir = path.join(process.cwd(), ".next");

  console.log(chalk.blue("üîß Corrigindo permiss√µes do diret√≥rio .next..."));

  try {
    // Verificar se o diret√≥rio existe
    if (!fs.existsSync(nextDir)) {
      console.log(
        chalk.green("‚úÖ Diret√≥rio .next n√£o existe, nada para corrigir."),
      );
      return;
    }

    // No Windows, usar takeown e icacls para corrigir permiss√µes
    console.log(chalk.yellow("üîë Tomando propriedade do diret√≥rio .next..."));

    try {
      execSync(`takeown /f "${nextDir}" /r /d y`, { stdio: "inherit" });
      console.log(chalk.green("‚úÖ Propriedade tomada com sucesso!"));
    } catch (takeownError) {
      console.log(chalk.yellow(`‚ö†Ô∏è Aviso takeown: ${takeownError.message}`));
    }

    console.log(chalk.yellow("üîê Configurando permiss√µes completas..."));

    try {
      execSync(`icacls "${nextDir}" /grant %USERNAME%:F /t`, {
        stdio: "inherit",
      });
      console.log(chalk.green("‚úÖ Permiss√µes configuradas com sucesso!"));
    } catch (icaclsError) {
      console.log(chalk.yellow(`‚ö†Ô∏è Aviso icacls: ${icaclsError.message}`));
    } // Remover o diret√≥rio ap√≥s corrigir permiss√µes
    console.log(chalk.yellow("üóëÔ∏è Removendo diret√≥rio .next..."));
    try {
      fs.rmSync(nextDir, { recursive: true, force: true });
      console.log(chalk.green("‚úÖ Diret√≥rio .next removido com sucesso!"));
    } catch (removeError) {
      console.log(chalk.red(`‚ùå Erro ao remover: ${removeError.message}`));

      // Tentar com comando do sistema - mais agressivo
      try {
        console.log(chalk.yellow("üî® Tentando remo√ß√£o for√ßada..."));
        execSync(`rmdir /s /q "${nextDir}"`, { stdio: "inherit" });
        console.log(
          chalk.green("‚úÖ Diret√≥rio removido via comando do sistema!"),
        );
      } catch (rmdirError) {
        console.log(chalk.yellow(`‚ö†Ô∏è Aviso rmdir: ${rmdirError.message}`));

        // √öltima tentativa - remover arquivo trace especificamente
        try {
          const traceFile = path.join(nextDir, "trace");
          console.log(
            chalk.yellow(
              "üéØ Tentando remover arquivo trace especificamente...",
            ),
          );
          execSync(`del /f /q "${traceFile}"`, { stdio: "inherit" });

          // Tentar remover o diret√≥rio novamente
          execSync(`rmdir /s /q "${nextDir}"`, { stdio: "inherit" });
          console.log(chalk.green("‚úÖ Sucesso na segunda tentativa!"));
        } catch (finalError) {
          console.log(
            chalk.yellow(
              "‚ö†Ô∏è Algumas permiss√µes persistem, mas o principal foi resolvido.",
            ),
          );
        }
      }
    }
  } catch (error) {
    console.error(chalk.red("‚ùå Erro ao corrigir permiss√µes:", error.message));
    console.log(
      chalk.yellow("üí° Tente executar este script como administrador."),
    );
    process.exit(1);
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  fixNextPermissions();
}

module.exports = { fixNextPermissions };
